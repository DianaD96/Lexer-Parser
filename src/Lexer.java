/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;
//...

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Lexer.lex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\2\0\1\1\22\0\1\3\1\11\1\7\1\12"+
    "\1\0\1\13\1\14\1\6\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\12\5\1\25\1\26\1\27\1\30\1\31\1\13\1\13"+
    "\5\4\1\37\15\4\1\37\6\4\1\32\1\13\1\33\1\13\1\10"+
    "\1\13\1\47\1\40\1\51\1\57\1\56\1\50\1\55\1\52\1\43"+
    "\2\4\1\42\1\64\1\44\1\41\1\53\1\60\1\46\1\54\1\45"+
    "\1\62\1\63\1\61\3\4\1\34\1\36\1\35\1\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\3\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\1\1\27\20\3\5\0\1\30\1\31\1\32"+
    "\1\0\1\33\1\0\1\34\6\0\1\35\1\0\1\36"+
    "\1\3\1\37\1\3\1\40\1\41\10\3\1\42\6\3"+
    "\1\43\4\3\1\0\1\44\1\45\1\46\7\0\1\47"+
    "\5\0\1\3\1\50\1\51\13\3\1\52\6\3\1\5"+
    "\15\0\1\53\1\54\1\3\1\55\2\3\1\56\2\3"+
    "\1\57\1\60\1\61\1\3\1\62\1\63\5\0\1\47"+
    "\12\0\1\3\1\64\1\3\1\65\1\3\1\66\7\0"+
    "\1\35\3\0\1\35\5\0\1\67\1\70\17\0\1\35"+
    "\52\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\65\0\237\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\65\0\65\0\65\0\65\0\65"+
    "\0\u0212\0\65\0\u0247\0\u027c\0\65\0\65\0\u02b1\0\65"+
    "\0\65\0\65\0\u02e6\0\65\0\u031b\0\237\0\u0350\0\u0385"+
    "\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d"+
    "\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5"+
    "\0\u070a\0\u073f\0\u013e\0\u013e\0\65\0\65\0\u0774\0\65"+
    "\0\u07a9\0\65\0\u07de\0\u02e6\0\u0813\0\u0848\0\u087d\0\u08b2"+
    "\0\65\0\u08e7\0\65\0\u091c\0\237\0\u0951\0\u0986\0\237"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0986\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\237\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\237"+
    "\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u06d5\0\u070a\0\65"+
    "\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\65"+
    "\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\237\0\237"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\237\0\u126d\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u0774\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f"+
    "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627"+
    "\0\237\0\237\0\u165c\0\237\0\u1691\0\u16c6\0\237\0\u16fb"+
    "\0\u1730\0\237\0\237\0\237\0\u1765\0\237\0\237\0\u179a"+
    "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u0e7e\0\u18a3\0\u18d8\0\u190d"+
    "\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\237\0\u1aea\0\237\0\u1b1f\0\237\0\u1b54\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1588\0\u1cc7\0\u1cfc\0\u1d31"+
    "\0\u087d\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\237\0\237"+
    "\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2"+
    "\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u1dd0"+
    "\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd"+
    "\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5"+
    "\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d"+
    "\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5"+
    "\0\u282a\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d"+
    "\0\u29d2\0\u2a07";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\5\1\43\1\44\1\45\1\46"+
    "\1\47\1\5\1\50\1\51\1\5\1\52\1\53\1\5"+
    "\1\54\1\5\1\55\1\56\67\0\1\4\66\0\2\5"+
    "\2\0\1\5\26\0\26\5\5\0\1\6\2\0\1\57"+
    "\12\0\1\60\1\61\44\0\61\62\1\0\1\63\1\0"+
    "\4\63\1\64\55\63\30\0\1\65\35\0\1\12\1\0"+
    "\62\12\14\0\1\66\55\0\1\6\71\0\1\67\77\0"+
    "\1\70\40\0\1\71\1\0\1\71\24\0\1\72\1\0"+
    "\1\73\33\0\1\74\1\0\1\74\1\0\1\75\1\76"+
    "\1\77\12\0\1\100\12\0\1\101\1\0\1\102\63\0"+
    "\1\103\32\0\2\5\2\0\1\5\26\0\2\5\1\104"+
    "\23\5\4\0\2\5\2\0\1\5\26\0\20\5\1\105"+
    "\5\5\4\0\2\5\2\0\1\5\26\0\17\5\1\106"+
    "\6\5\4\0\2\5\2\0\1\5\26\0\5\5\1\107"+
    "\3\5\1\110\14\5\4\0\2\5\2\0\1\5\26\0"+
    "\2\5\1\111\10\5\1\112\4\5\1\113\5\5\4\0"+
    "\2\5\2\0\1\5\26\0\10\5\1\114\6\5\1\115"+
    "\6\5\4\0\2\5\2\0\1\5\26\0\3\5\1\116"+
    "\22\5\4\0\2\5\2\0\1\5\26\0\2\5\1\117"+
    "\1\120\1\121\13\5\1\122\5\5\4\0\2\5\2\0"+
    "\1\5\26\0\13\5\1\123\12\5\4\0\2\5\2\0"+
    "\1\5\26\0\7\5\1\124\16\5\4\0\2\5\2\0"+
    "\1\5\26\0\6\5\1\125\10\5\1\126\6\5\4\0"+
    "\2\5\2\0\1\5\26\0\3\5\1\127\22\5\4\0"+
    "\2\5\2\0\1\5\26\0\2\5\1\130\1\5\1\131"+
    "\21\5\4\0\2\5\2\0\1\5\26\0\13\5\1\132"+
    "\12\5\4\0\2\5\2\0\1\5\26\0\2\5\1\133"+
    "\23\5\4\0\2\5\2\0\1\5\26\0\10\5\1\134"+
    "\15\5\5\0\1\135\64\0\1\136\64\0\1\137\65\0"+
    "\1\140\57\0\11\67\1\141\52\67\1\0\1\71\1\0"+
    "\1\71\26\0\1\73\33\0\1\142\1\0\1\142\1\143"+
    "\1\144\1\145\1\146\12\0\1\147\10\0\1\150\3\0"+
    "\26\143\1\0\1\102\1\0\1\102\1\0\1\75\2\0"+
    "\1\151\12\0\2\152\1\153\43\0\61\154\1\0\1\77"+
    "\1\0\4\77\1\155\55\77\5\0\1\75\60\0\1\102"+
    "\1\0\1\102\21\0\1\153\43\0\2\5\2\0\1\5"+
    "\26\0\2\5\1\156\23\5\4\0\2\5\2\0\1\5"+
    "\26\0\6\5\1\157\17\5\4\0\2\5\2\0\1\5"+
    "\26\0\6\5\1\160\17\5\4\0\2\5\2\0\1\5"+
    "\26\0\14\5\1\160\11\5\4\0\2\5\2\0\1\5"+
    "\26\0\17\5\1\161\6\5\4\0\2\5\2\0\1\5"+
    "\26\0\17\5\1\162\6\5\4\0\2\5\2\0\1\5"+
    "\26\0\6\5\1\163\1\5\1\164\15\5\4\0\2\5"+
    "\2\0\1\5\26\0\4\5\1\165\21\5\4\0\2\5"+
    "\2\0\1\5\26\0\7\5\1\166\16\5\4\0\2\5"+
    "\2\0\1\5\26\0\2\5\1\167\23\5\4\0\2\5"+
    "\2\0\1\5\26\0\17\5\1\170\6\5\4\0\2\5"+
    "\2\0\1\5\26\0\10\5\1\171\15\5\4\0\2\5"+
    "\2\0\1\5\26\0\4\5\1\172\21\5\4\0\2\5"+
    "\2\0\1\5\26\0\7\5\1\173\16\5\4\0\2\5"+
    "\2\0\1\5\26\0\21\5\1\174\4\5\4\0\2\5"+
    "\2\0\1\5\26\0\4\5\1\175\10\5\1\176\10\5"+
    "\4\0\2\5\2\0\1\5\26\0\12\5\1\177\13\5"+
    "\4\0\2\5\2\0\1\5\26\0\4\5\1\200\21\5"+
    "\4\0\2\5\2\0\1\5\26\0\4\5\1\201\21\5"+
    "\4\0\2\5\2\0\1\5\26\0\4\5\1\202\21\5"+
    "\5\0\1\135\16\0\1\61\41\0\11\67\1\141\11\67"+
    "\1\203\40\67\1\0\1\142\1\0\1\142\1\143\1\144"+
    "\1\145\1\146\12\0\1\147\14\0\26\143\1\0\1\204"+
    "\1\0\1\204\2\143\2\0\1\143\10\0\1\142\11\0"+
    "\1\150\3\0\26\143\1\0\1\204\1\0\1\204\1\0"+
    "\1\144\2\0\1\205\10\0\1\142\1\0\2\206\6\0"+
    "\1\150\35\0\61\207\1\0\1\146\1\0\4\146\1\210"+
    "\55\146\5\0\1\144\64\0\1\211\64\0\1\212\60\0"+
    "\1\153\1\0\1\153\1\0\1\213\1\214\1\215\12\0"+
    "\1\216\14\0\1\217\33\0\1\102\57\0\1\155\1\0"+
    "\1\155\3\77\1\155\15\77\1\220\37\77\4\0\2\5"+
    "\2\0\1\5\26\0\3\5\1\160\22\5\4\0\2\5"+
    "\2\0\1\5\26\0\5\5\1\221\20\5\4\0\2\5"+
    "\2\0\1\5\26\0\11\5\1\222\14\5\4\0\2\5"+
    "\2\0\1\5\26\0\23\5\1\223\2\5\4\0\2\5"+
    "\2\0\1\5\26\0\20\5\1\224\5\5\4\0\2\5"+
    "\2\0\1\5\26\0\10\5\1\225\15\5\4\0\2\5"+
    "\2\0\1\5\26\0\10\5\1\226\15\5\4\0\2\5"+
    "\2\0\1\5\26\0\10\5\1\114\15\5\4\0\2\5"+
    "\2\0\1\5\26\0\11\5\1\227\14\5\4\0\2\5"+
    "\2\0\1\5\26\0\7\5\1\160\16\5\4\0\2\5"+
    "\2\0\1\5\26\0\5\5\1\230\20\5\4\0\2\5"+
    "\2\0\1\5\26\0\4\5\1\231\21\5\4\0\2\5"+
    "\2\0\1\5\26\0\11\5\1\232\14\5\4\0\2\5"+
    "\2\0\1\5\26\0\17\5\1\233\6\5\4\0\2\5"+
    "\2\0\1\5\26\0\6\5\1\234\17\5\4\0\2\5"+
    "\2\0\1\5\26\0\3\5\1\235\22\5\4\0\2\5"+
    "\2\0\1\5\26\0\20\5\1\236\5\5\4\0\2\5"+
    "\2\0\1\5\26\0\5\5\1\237\20\5\1\0\1\204"+
    "\1\0\1\204\27\0\1\150\36\0\1\240\64\0\1\241"+
    "\65\0\1\242\57\0\1\243\1\0\1\243\3\146\1\210"+
    "\11\146\1\244\11\146\1\245\31\146\5\0\1\211\16\0"+
    "\1\152\41\0\1\102\1\0\1\102\1\0\1\212\17\0"+
    "\1\153\40\0\1\217\1\0\1\217\1\0\1\213\2\0"+
    "\1\246\10\0\1\247\1\0\2\250\10\0\1\101\33\0"+
    "\61\251\1\0\1\215\1\0\4\215\1\252\55\215\5\0"+
    "\1\213\60\0\1\217\1\0\1\217\15\0\1\247\13\0"+
    "\1\101\30\0\1\220\1\0\1\220\1\77\1\253\1\254"+
    "\1\255\12\77\1\256\14\77\1\257\25\77\4\0\2\5"+
    "\2\0\1\5\26\0\7\5\1\260\16\5\4\0\2\5"+
    "\2\0\1\5\26\0\15\5\1\261\10\5\4\0\2\5"+
    "\2\0\1\5\26\0\3\5\1\262\22\5\4\0\2\5"+
    "\2\0\1\5\26\0\6\5\1\263\17\5\4\0\2\5"+
    "\2\0\1\5\26\0\5\5\1\264\20\5\4\0\2\5"+
    "\2\0\1\5\26\0\17\5\1\265\6\5\5\0\1\240"+
    "\16\0\1\206\41\0\1\204\1\0\1\204\1\0\1\241"+
    "\13\0\1\142\11\0\1\150\32\0\1\204\1\0\1\204"+
    "\15\0\1\142\11\0\1\150\32\0\1\243\1\0\1\243"+
    "\3\146\1\210\23\146\1\245\31\146\1\0\1\244\1\0"+
    "\1\244\1\266\1\267\1\270\1\210\12\146\1\271\14\146"+
    "\26\266\5\0\1\272\60\0\1\247\1\0\1\247\1\0"+
    "\1\75\1\76\1\77\12\0\1\100\14\0\1\102\32\0"+
    "\1\273\65\0\1\217\57\0\1\252\1\0\1\252\3\215"+
    "\1\252\11\215\1\274\13\215\1\275\27\215\1\0\1\257"+
    "\1\0\1\257\1\77\1\253\1\77\1\155\1\276\10\77"+
    "\1\277\1\77\2\300\10\77\1\301\27\77\1\0\1\77"+
    "\1\0\1\77\3\302\1\303\55\302\1\0\1\255\1\0"+
    "\1\255\3\304\1\305\15\304\1\306\37\304\1\0\1\77"+
    "\1\0\2\77\1\253\1\77\1\155\55\77\1\0\1\257"+
    "\1\0\1\257\3\77\1\155\11\77\1\277\13\77\1\301"+
    "\27\77\4\0\2\5\2\0\1\5\26\0\5\5\1\307"+
    "\20\5\4\0\2\5\2\0\1\5\26\0\3\5\1\310"+
    "\22\5\4\0\2\5\2\0\1\5\26\0\16\5\1\160"+
    "\7\5\1\0\1\243\1\0\1\243\2\266\1\146\1\210"+
    "\1\266\10\146\1\244\11\146\1\245\3\146\26\266\1\0"+
    "\1\243\1\0\1\243\1\146\1\267\1\146\1\210\1\311"+
    "\10\146\1\244\1\146\2\312\6\146\1\245\31\146\1\0"+
    "\1\146\1\0\1\146\3\313\1\314\55\313\1\0\1\146"+
    "\1\0\2\146\1\267\1\146\1\210\55\146\5\0\1\272"+
    "\16\0\1\250\41\0\1\217\1\0\1\217\1\0\1\273"+
    "\13\0\1\247\13\0\1\101\30\0\1\274\1\0\1\274"+
    "\1\215\1\315\1\316\1\317\12\215\1\320\14\215\1\321"+
    "\25\215\1\0\1\77\1\0\2\77\1\322\1\77\1\155"+
    "\55\77\1\0\1\277\1\0\1\277\1\77\1\323\1\324"+
    "\1\155\12\77\1\325\14\77\1\155\25\77\1\0\1\77"+
    "\1\0\2\77\1\326\1\77\1\155\55\77\1\0\1\77"+
    "\1\0\3\77\1\257\1\155\55\77\1\0\1\155\1\0"+
    "\1\155\2\77\1\257\1\155\15\77\1\220\37\77\1\0"+
    "\1\304\1\0\4\304\1\305\55\304\1\0\1\305\1\0"+
    "\1\305\3\304\1\305\11\304\1\327\3\304\1\306\7\304"+
    "\1\330\27\304\1\0\1\306\1\0\1\306\1\304\1\331"+
    "\1\332\1\305\12\304\1\333\14\304\1\317\25\304\1\0"+
    "\1\146\1\0\2\146\1\334\1\146\1\210\55\146\1\0"+
    "\1\146\1\0\2\146\1\335\1\146\1\210\55\146\1\0"+
    "\1\146\1\0\3\146\2\210\55\146\1\0\1\243\1\0"+
    "\1\243\2\146\2\210\11\146\1\244\11\146\1\245\31\146"+
    "\1\0\1\321\1\0\1\321\1\215\1\315\1\215\1\252"+
    "\1\336\12\215\2\337\1\340\37\215\1\0\1\215\1\0"+
    "\1\215\3\341\1\342\55\341\1\0\1\317\1\0\1\317"+
    "\3\304\1\305\11\304\1\327\13\304\1\330\27\304\1\0"+
    "\1\215\1\0\2\215\1\315\1\215\1\252\55\215\1\0"+
    "\1\321\1\0\1\321\3\215\1\252\15\215\1\340\37\215"+
    "\1\0\1\77\1\0\2\77\1\322\1\77\1\155\14\77"+
    "\1\300\40\77\1\0\1\155\1\0\1\155\1\77\1\323"+
    "\1\77\1\155\1\343\12\77\2\344\1\220\37\77\1\0"+
    "\1\77\1\0\1\77\3\345\1\346\55\345\1\0\1\77"+
    "\1\0\2\77\1\323\1\77\1\155\55\77\1\0\1\257"+
    "\1\0\1\257\1\77\1\326\1\77\1\155\11\77\1\277"+
    "\13\77\1\301\27\77\1\0\1\327\1\0\1\327\1\304"+
    "\1\347\1\350\1\305\12\304\1\351\14\304\1\255\25\304"+
    "\1\0\1\317\1\0\1\317\1\304\1\331\1\304\1\305"+
    "\1\352\10\304\1\327\1\304\2\353\10\304\1\330\27\304"+
    "\1\0\1\304\1\0\1\304\3\354\1\355\55\354\1\0"+
    "\1\304\1\0\2\304\1\331\1\304\1\305\55\304\1\0"+
    "\1\146\1\0\2\146\1\334\1\146\1\210\14\146\1\312"+
    "\40\146\1\0\1\243\1\0\1\243\1\146\1\335\1\146"+
    "\1\210\11\146\1\244\11\146\1\245\31\146\1\0\1\215"+
    "\1\0\2\215\1\356\1\215\1\252\55\215\1\0\1\215"+
    "\1\0\2\215\1\357\1\215\1\252\55\215\1\0\1\340"+
    "\1\0\1\340\1\215\1\360\1\361\1\252\12\215\1\362"+
    "\14\215\1\252\25\215\1\0\1\215\1\0\3\215\1\321"+
    "\1\252\55\215\1\0\1\252\1\0\1\252\2\215\1\321"+
    "\1\252\11\215\1\274\13\215\1\275\27\215\1\0\1\77"+
    "\1\0\2\77\1\363\1\77\1\155\55\77\1\0\1\77"+
    "\1\0\2\77\1\364\1\77\1\155\55\77\1\0\1\77"+
    "\1\0\3\77\2\155\55\77\1\0\1\155\1\0\1\155"+
    "\2\77\2\155\15\77\1\220\37\77\1\0\1\255\1\0"+
    "\1\255\1\304\1\347\1\304\1\305\1\365\12\304\2\366"+
    "\1\306\37\304\1\0\1\304\1\0\1\304\3\367\1\370"+
    "\55\367\1\0\1\304\1\0\2\304\1\347\1\304\1\305"+
    "\55\304\1\0\1\304\1\0\2\304\1\371\1\304\1\305"+
    "\55\304\1\0\1\304\1\0\2\304\1\372\1\304\1\305"+
    "\55\304\1\0\1\304\1\0\3\304\1\317\1\305\55\304"+
    "\1\0\1\305\1\0\1\305\2\304\1\317\1\305\11\304"+
    "\1\327\3\304\1\306\7\304\1\330\27\304\1\0\1\215"+
    "\1\0\2\215\1\356\1\215\1\252\14\215\1\337\40\215"+
    "\1\0\1\321\1\0\1\321\1\215\1\357\1\215\1\252"+
    "\15\215\1\340\37\215\1\0\1\252\1\0\1\252\1\215"+
    "\1\360\1\215\1\252\1\373\10\215\1\274\1\215\2\374"+
    "\10\215\1\275\27\215\1\0\1\215\1\0\1\215\3\375"+
    "\1\376\55\375\1\0\1\215\1\0\2\215\1\360\1\215"+
    "\1\252\55\215\1\0\1\77\1\0\2\77\1\363\1\77"+
    "\1\155\14\77\1\344\40\77\1\0\1\155\1\0\1\155"+
    "\1\77\1\364\1\77\1\155\15\77\1\220\37\77\1\0"+
    "\1\304\1\0\2\304\1\377\1\304\1\305\55\304\1\0"+
    "\1\304\1\0\2\304\1\u0100\1\304\1\305\55\304\1\0"+
    "\1\304\1\0\3\304\1\255\1\305\55\304\1\0\1\305"+
    "\1\0\1\305\2\304\1\255\1\305\11\304\1\327\3\304"+
    "\1\306\7\304\1\330\27\304\1\0\1\304\1\0\2\304"+
    "\1\371\1\304\1\305\14\304\1\353\40\304\1\0\1\317"+
    "\1\0\1\317\1\304\1\372\1\304\1\305\11\304\1\327"+
    "\13\304\1\330\27\304\1\0\1\215\1\0\2\215\1\u0101"+
    "\1\215\1\252\55\215\1\0\1\215\1\0\2\215\1\u0102"+
    "\1\215\1\252\55\215\1\0\1\215\1\0\3\215\2\252"+
    "\55\215\1\0\1\252\1\0\1\252\2\215\2\252\11\215"+
    "\1\274\13\215\1\275\27\215\1\0\1\304\1\0\2\304"+
    "\1\377\1\304\1\305\14\304\1\366\40\304\1\0\1\255"+
    "\1\0\1\255\1\304\1\u0100\1\304\1\305\15\304\1\306"+
    "\37\304\1\0\1\215\1\0\2\215\1\u0101\1\215\1\252"+
    "\14\215\1\374\40\215\1\0\1\252\1\0\1\252\1\215"+
    "\1\u0102\1\215\1\252\11\215\1\274\13\215\1\275\27\215";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10812];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\7\1\5\11\1\1\1\11"+
    "\2\1\2\11\1\1\3\11\1\1\1\11\22\1\5\0"+
    "\1\1\2\11\1\0\1\11\1\0\1\11\6\0\1\11"+
    "\1\0\1\11\31\1\1\0\2\1\1\11\7\0\1\11"+
    "\5\0\26\1\15\0\17\1\5\0\1\1\12\0\6\1"+
    "\7\0\1\1\3\0\1\1\5\0\2\1\17\0\1\1"+
    "\52\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private boolean debug_mode;
  public  boolean debug()            { return debug_mode; }
  public  void    debug(boolean mode){ debug_mode = mode; }

  private void print_lexeme(int type, Object value){
    if(!debug()){ return; }

    System.out.print("<");
    switch(type){
      case sym.LET:
        System.out.print("LET"); break;
      case sym.EQUAL:
        System.out.print("="); break;
      case sym.SEMICOL:
        System.out.print(";"); break;
      case sym.PLUS:
        System.out.print("+"); break;
      case sym.MINUS:
        System.out.print("-"); break;
      case sym.MULT:
        System.out.print("*"); break;
      case sym.DIV:
        System.out.print("/"); break;
      case sym.LPAREN:
        System.out.print("("); break;
      case sym.RPAREN:
        System.out.print(")"); break;
      case sym.SLPAREN:
        System.out.print("["); break;
      case sym.SRPAREN:
        System.out.print("]"); break;
      case sym.CLPAREN:
        System.out.print("{"); break;
      case sym.CRPAREN:
        System.out.print("}"); break;
      case sym.PLPAREN:
        System.out.print("<"); break;
      case sym.PRPAREN:
        System.out.print(">"); break;
      case sym.COLON:
        System.out.print(":"); break;
      case sym.COMMA:
        System.out.print(","); break;
      case sym.DOT:
        System.out.print("."); break;
      case sym.DOTDOT:
        System.out.print("::"); break;
      case sym.EQEQ:
        System.out.print("=="); break;
      case sym.NOTEQ:
        System.out.print("!="); break;
      case sym.ANDAND:
        System.out.print("&&"); break;
      case sym.OROR:
        System.out.print("||"); break;
      case sym.DICTD:
        System.out.print("dict"); break;
      case sym.SEQD:
        System.out.print("seq"); break; 
      case sym.TDEF:
        System.out.print("tdef"); break;
      case sym.FDEF:
        System.out.print("fdef"); break;
      case sym.ALIAS:
        System.out.print("alias"); break;
      case sym.READ:
        System.out.print("read"); break;
      case sym.PRINT:
        System.out.print("print"); break;
      case sym.IF:
        System.out.print("if"); break;
      case sym.THEN:
        System.out.print("then"); break;
      case sym.FI:
        System.out.print("fi"); break;
      case sym.ELSE:
        System.out.print("else"); break;
      case sym.ELIF:
        System.out.print("elif"); break;
      case sym.WHILE:
        System.out.print("while"); break;
      case sym.DO:
        System.out.print("do"); break;
      case sym.OD:
        System.out.print("od"); break;
      case sym.FORALL:
        System.out.print("forall"); break;
      case sym.IN:
        System.out.print("in"); break;
      case sym.RETURN:
        System.out.print("return"); break;
      case sym.VOID:
        System.out.print("void"); break;
      case sym.MAIN:
        System.out.print("main"); break;
      case sym.INT:
        System.out.printf("INT %d", value); break;
      case sym.FLOAT:
        System.out.printf("FLOAT %f", value); break;
      case sym.RAT:
        System.out.printf("RAT %s", value); break;
      case sym.CHAR:
        System.out.printf("CHAR %s", value); break;
      case sym.IDENTIFIER:
        System.out.printf("IDENT %s", value); break;
      case sym.COMMENT:
        System.out.printf("COMMENT %s", value); break;
      case sym.BOOLEAN:
        System.out.printf("BOOL %s", value); break;
      case sym.STR:
        System.out.printf("STR %s", value); break;
      case sym.DICT:
        System.out.printf("DICT %s", value); break;
      case sym.DATATYPE:
        System.out.printf("DATATYPE %s", value); break;
      case sym.SEQ:
        System.out.printf("SEQUENCE %s", value); break;
    }
    System.out.print(">");
  }

  private Symbol symbol(int type) {
    print_lexeme(type, null);
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    print_lexeme(type, value);
    return new Symbol(type, yyline, yycolumn, value);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("file:" + (yyline+1) +
    ":0: Error: Invalid input '" + yytext()+"'");
  return symbol(sym.BADCHAR);
            }
          case 57: break;
          case 2: 
            { /* do nothing */
            }
          case 58: break;
          case 3: 
            { return symbol(sym.IDENTIFIER, yytext());
            }
          case 59: break;
          case 4: 
            { return symbol(sym.INT, Integer.parseInt(yytext()));
            }
          case 60: break;
          case 5: 
            { return symbol(sym.COMMENT, yytext());
            }
          case 61: break;
          case 6: 
            { return symbol(sym.LPAREN);
            }
          case 62: break;
          case 7: 
            { return symbol(sym.RPAREN);
            }
          case 63: break;
          case 8: 
            { return symbol(sym.MULT);
            }
          case 64: break;
          case 9: 
            { return symbol(sym.PLUS);
            }
          case 65: break;
          case 10: 
            { return symbol(sym.COMMA);
            }
          case 66: break;
          case 11: 
            { return symbol(sym.MINUS);
            }
          case 67: break;
          case 12: 
            { return symbol(sym.DOT);
            }
          case 68: break;
          case 13: 
            { return symbol(sym.DIV);
            }
          case 69: break;
          case 14: 
            { return symbol(sym.COLON);
            }
          case 70: break;
          case 15: 
            { return symbol(sym.SEMICOL);
            }
          case 71: break;
          case 16: 
            { return symbol(sym.PLPAREN);
            }
          case 72: break;
          case 17: 
            { return symbol(sym.EQUAL);
            }
          case 73: break;
          case 18: 
            { return symbol(sym.PRPAREN);
            }
          case 74: break;
          case 19: 
            { return symbol(sym.SLPAREN);
            }
          case 75: break;
          case 20: 
            { return symbol(sym.SRPAREN);
            }
          case 76: break;
          case 21: 
            { return symbol(sym.CLPAREN);
            }
          case 77: break;
          case 22: 
            { return symbol(sym.CRPAREN);
            }
          case 78: break;
          case 23: 
            { return symbol(sym.BOOLEAN, yytext());
            }
          case 79: break;
          case 24: 
            { return symbol(sym.STR, yytext());
            }
          case 80: break;
          case 25: 
            { return symbol(sym.NOTEQ);
            }
          case 81: break;
          case 26: 
            { return symbol(sym.ANDAND);
            }
          case 82: break;
          case 27: 
            { return symbol(sym.DOTDOT);
            }
          case 83: break;
          case 28: 
            { return symbol(sym.EQEQ);
            }
          case 84: break;
          case 29: 
            { return symbol(sym.DICT, yytext());
            }
          case 85: break;
          case 30: 
            { return symbol(sym.OROR);
            }
          case 86: break;
          case 31: 
            { return symbol(sym.OD);
            }
          case 87: break;
          case 32: 
            { return symbol(sym.IN);
            }
          case 88: break;
          case 33: 
            { return symbol(sym.IF);
            }
          case 89: break;
          case 34: 
            { return symbol(sym.FI);
            }
          case 90: break;
          case 35: 
            { return symbol(sym.DO);
            }
          case 91: break;
          case 36: 
            { return symbol(sym.FLOAT, Float.parseFloat(yytext()));
            }
          case 92: break;
          case 37: 
            { return symbol(sym.RAT, yytext());
            }
          case 93: break;
          case 38: 
            { return symbol(sym.CHAR, yytext());
            }
          case 94: break;
          case 39: 
            { return symbol(sym.SEQ, yytext());
            }
          case 95: break;
          case 40: 
            { return symbol(sym.LET);
            }
          case 96: break;
          case 41: 
            { return symbol(sym.DATATYPE, yytext());
            }
          case 97: break;
          case 42: 
            { return symbol(sym.SEQD);
            }
          case 98: break;
          case 43: 
            { return symbol(sym.THEN);
            }
          case 99: break;
          case 44: 
            { return symbol(sym.TDEF);
            }
          case 100: break;
          case 45: 
            { return symbol(sym.READ);
            }
          case 101: break;
          case 46: 
            { return symbol(sym.FDEF);
            }
          case 102: break;
          case 47: 
            { return symbol(sym.ELIF);
            }
          case 103: break;
          case 48: 
            { return symbol(sym.ELSE);
            }
          case 104: break;
          case 49: 
            { return symbol(sym.DICTD);
            }
          case 105: break;
          case 50: 
            { return symbol(sym.VOID);
            }
          case 106: break;
          case 51: 
            { return symbol(sym.MAIN);
            }
          case 107: break;
          case 52: 
            { return symbol(sym.ALIAS);
            }
          case 108: break;
          case 53: 
            { return symbol(sym.PRINT);
            }
          case 109: break;
          case 54: 
            { return symbol(sym.WHILE);
            }
          case 110: break;
          case 55: 
            { return symbol(sym.RETURN);
            }
          case 111: break;
          case 56: 
            { return symbol(sym.FORALL);
            }
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
